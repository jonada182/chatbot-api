version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.2.1

commands:
  create_env_file:
    description: "Create .env file"
    steps:
      - run:
          name: Create .env file
          command: |
            echo "FLASK_RUN_PORT=$FLASK_RUN_PORT" > .env
            echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> .env
            echo "OPENAI_ORG_ID=$OPENAI_ORG_ID" >> .env

jobs:
  build:
    docker:
      - image: cimg/python:3.11.3
    environment:
      AWS_REGION: "ca-central-1"
      CONTAINER_NAME: "chatbot-api"
    steps:
      - checkout
      - create_env_file
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build the Docker image
          command: docker-compose build app
      - aws-ecr/ecr-login:
          region: $AWS_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Tag and push Docker image
          command: |
            docker tag $CONTAINER_NAME:latest $ECR_REGISTRY/$CONTAINER_NAME:latest
            docker push $ECR_REGISTRY/$CONTAINER_NAME:latest

  deploy:
    docker:
      - image: cimg/base:2023.04
    environment:
      CONTAINER_NAME: "chatbot-api"
    steps:
      - checkout
      - create_env_file
      - add_ssh_keys:
          fingerprints:
          - "e6:b0:dd:bb:2a:ba:c3:ba:a4:0f:91:da:07:2b:e2:71"
      - run:
          name: Deploy to AWS EC2 instance
          command: |
            sed -i "s|build: .|image: $ECR_REGISTRY/$CONTAINER_NAME:latest|" docker-compose.yml
            scp -o StrictHostKeyChecking=no ./.env docker-compose.yml deploy.sh ec2-user@$AWS_INSTANCE_IP:/tmp
            ssh -o StrictHostKeyChecking=no ec2-user@$AWS_INSTANCE_IP 'aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $ECR_REGISTRY'
            ssh -o StrictHostKeyChecking=no ec2-user@$AWS_INSTANCE_IP 'sudo chmod +x /tmp/deploy.sh && /tmp/deploy.sh'

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - main
